import io
import joblib
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from fastapi import FastAPI, UploadFile, File, Request
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
from sklearn.preprocessing import LabelEncoder
import json
from pathlib import Path

# ---------------- App ----------------
app = FastAPI()
templates = Jinja2Templates(directory="templates")
app.mount("/static", StaticFiles(directory="static"), name="static")

# ---------------- Load Model ----------------
model = joblib.load("best_model_xgb.pkl")

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≤‡∏•‡∏¥‡πÄ‡∏ö‡∏£‡∏ä‡∏±‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
calib_path = Path("calib.json")
if calib_path.exists():
    calib = json.loads(calib_path.read_text(encoding="utf-8"))
    Q01, Q99, T0, S = calib["q01"], calib["q99"], calib["t0"], calib["s"]
else:
    Q01, Q99, T0, S = 10.0, 55.0, 35.0, 5.0

def dbz_to_percent(dbz: float) -> float:
    """map dBZ -> [0,100] ‡∏î‡πâ‡∏ß‡∏¢ logistic + robust clipping"""
    x = np.clip(dbz, Q01, Q99)
    z = (x - T0) / max(S, 1e-6)
    p = 100.0 * (1.0 / (1.0 + np.exp(-z)))
    return float(np.clip(p, 0.0, 100.0))

# üëâ ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á
final_features = [
    "MML q", "‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î", "K", "Lifted", "Day", "‡∏≠‡∏≥‡πÄ‡∏†‡∏≠",
    "LCL P.1", "LCL Temp", "SWEAT", "LCL P",
    "Month", "Showalter", "Cross", "Year"
]

# ---------------- Routes ----------------
@app.get("/", response_class=HTMLResponse)
async def page1(request: Request):
    return templates.TemplateResponse("page1.html", {"request": request})

@app.get("/page2.html", response_class=HTMLResponse)
async def page2(request: Request):
    return templates.TemplateResponse("page2.html", {"request": request})

@app.post("/predict")
async def predict(file: UploadFile = File(...)):
    try:
        # --- ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå ---
        content = await file.read()
        if file.filename.endswith(".csv"):
            df = pd.read_csv(io.StringIO(content.decode("utf-8")))
        elif file.filename.endswith((".xls", ".xlsx")):
            df = pd.read_excel(io.BytesIO(content))
        else:
            return JSONResponse({"error": "‚ùå ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå .csv ‡∏´‡∏£‡∏∑‡∏≠ .xlsx"}, status_code=400)

        df.columns = df.columns.astype(str).str.strip()

        # --- ‡∏ï‡∏£‡∏ß‡∏à‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
        if len(df) < 5:
            return JSONResponse({"error": "‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 5 ‡∏ß‡∏±‡∏ô"}, status_code=400)

        # --- ‡πÄ‡∏ß‡∏•‡∏≤ ---
        if "Date" in df.columns:
            df["Date"]  = pd.to_datetime(df["Date"], errors="coerce")
            df["Year"]  = df["Date"].dt.year
            df["Month"] = df["Date"].dt.month
            df["Day"]   = df["Date"].dt.day

        # ‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        latest = df.iloc[-1]
        province_txt = str(latest.get("‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î", "-")) if pd.notna(latest.get("‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î", np.nan)) else "-"
        district_txt = str(latest.get("‡∏≠‡∏≥‡πÄ‡∏†‡∏≠", "-"))  if pd.notna(latest.get("‡∏≠‡∏≥‡πÄ‡∏†‡∏≠", np.nan))  else "-"

        # --- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏ä‡πâ ---
        df = df[[c for c in final_features if c in df.columns]].dropna(how="any")
        df = df[final_features]   # ‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏Å‡πà‡∏≤

        # --- encode ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠ ---
        le_province, le_district = LabelEncoder(), LabelEncoder()
        if "‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î" in df.columns:
            df["‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î"] = le_province.fit_transform(df["‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î"].astype(str))
        if "‡∏≠‡∏≥‡πÄ‡∏†‡∏≠" in df.columns:
            df["‡∏≠‡∏≥‡πÄ‡∏†‡∏≠"] = le_district.fit_transform(df["‡∏≠‡∏≥‡πÄ‡∏†‡∏≠"].astype(str))

        # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 5 ‡πÅ‡∏ñ‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        last5 = df.tail(5)

        # ===== ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ + 3 ‡∏ß‡∏±‡∏ô =====
        preds = []
        today = datetime.now()
        for i in range(4):
            dt = today + timedelta(days=i)
            X_input = last5.copy()
            X_input["Year"], X_input["Month"], X_input["Day"] = dt.year, dt.month, dt.day

            prob_dbz = float(model.predict(X_input).mean())
            chance   = dbz_to_percent(prob_dbz)

            if chance < 30:
                sev, color = "‡∏ï‡πà‡∏≥", "#2ecc71"
            elif chance < 40:
                sev, color = "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "#f1c40f"
            elif chance < 50:
                sev, color = "‡∏™‡∏π‡∏á", "#ff9f1c"
            else:
                sev, color = "‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏°‡∏≤‡∏Å", "#e74c3c"

            preds.append({
                "date": dt.strftime("%d/%m/%Y"),
                "probability": round(chance, 1),
                "severity": sev,
                "color": color,
                "province": province_txt,
                "district": district_txt
            })

        return {"predictions": preds}

    except Exception as e:
        return JSONResponse({"error": str(e)}, status_code=500)
