import pandas as pd
import numpy as np
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import openpyxl

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Sheet2 ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå Excel
df = pd.read_excel(r"D:\Projeck\new data.xlsx", sheet_name="Sheet2")

# ‡πÅ‡∏™‡∏î‡∏á 5 ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å
#print(df.head())

# ----------------- ‡∏•‡∏ö‡∏Ñ‡πà‡∏≤ '-' -----------------
df = df.replace('-', np.nan)
df = df.apply(pd.to_numeric, errors='ignore')
df = df.dropna()

# ----------------- ‡πÅ‡∏õ‡∏•‡∏á Date ‡πÄ‡∏õ‡πá‡∏ô datetime -----------------
df['Date'] = pd.to_datetime(df['Date'], errors='coerce')

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà: ‡∏ß‡∏±‡∏ô / ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô / ‡∏õ‡∏µ
df['Year'] = df['Date'].dt.year
df['Month'] = df['Date'].dt.month
df['Day'] = df['Date'].dt.day
df['DayOfWeek'] = df['Date'].dt.dayofweek
df['Month_sin'] = np.sin(2 * np.pi * df['Month']/12)
df['Month_cos'] = np.cos(2 * np.pi * df['Month']/12)


# ----------------- ‡πÅ‡∏¢‡∏Å X, y -----------------
X = df.drop(['Date', 'dBZ', 'Year'], axis=1, errors='ignore')
y = df['dBZ']

# ----------------- ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Correlation -----------------
corr = X.corrwith(y)

# ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡∏≠‡∏≠‡∏Å
selected_features = corr[abs(corr) >= 0.05].index.tolist()
removed_features = corr[abs(corr) < 0.05].index.tolist()

# ----------------- ‡∏™‡∏£‡πâ‡∏≤‡∏á X ‡πÉ‡∏´‡∏°‡πà -----------------
X_selected = X[selected_features]

# ----------------- ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• -----------------
# print("‚úÖ ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ (Correlation >= 0.05):")
# print(selected_features)

# print("\n‚ùå ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡∏î‡∏≠‡∏≠‡∏Å (Correlation < 0.05):")
# print(removed_features)

# ----------------- ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• -----------------

# print("üìå ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• X_selected:", X_selected.shape)   # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß, ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
# print("\n‚úÖ ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ (Correlation >= 0.05):")
# print(selected_features)

# print("\n‚ùå ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡∏î‡∏≠‡∏≠‡∏Å (Correlation < 0.05):")
# print(removed_features)

# print("\nüîé ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 5 ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å:")
# print(X_selected.head())

# print("\nüìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ (Descriptive Statistics):")
# print(X_selected.describe())

# print("\n‚ÑπÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á DataFrame:")
# print(X_selected.info())

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import numpy as np

# ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á XGBoost ‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô‡πÉ‡∏ô terminal/colab)
# pip install xgboost
from xgboost import XGBRegressor

# ----------------- ‡πÅ‡∏ö‡πà‡∏á Train/Test -----------------
X_train, X_test, y_train, y_test = train_test_split(
    X_selected, y, test_size=0.2, random_state=42
)

# ----------------- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• -----------------
models = {
    "Linear Regression": LinearRegression(),
    "Decision Tree": DecisionTreeRegressor(random_state=42),
    "Random Forest": RandomForestRegressor(n_estimators=100, random_state=42),
    "XGBoost": XGBRegressor(n_estimators=100, random_state=42, verbosity=0)
}

# ----------------- ‡πÄ‡∏ó‡∏£‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏• -----------------
results = {}

for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    mae = mean_absolute_error(y_test, y_pred)
    rmse = np.sqrt(mean_squared_error(y_test, y_pred))
    r2 = r2_score(y_test, y_pred)

    results[name] = {"MAE": mae, "RMSE": rmse, "R¬≤": r2}

# ----------------- ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• -----------------
print("üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•\n")
for name, metrics in results.items():
    print(f"--- {name} ---")
    print(f"MAE  = {metrics['MAE']:.4f}")
    print(f"RMSE = {metrics['RMSE']:.4f}")
    print(f"R¬≤   = {metrics['R¬≤']:.4f}")
    print()

